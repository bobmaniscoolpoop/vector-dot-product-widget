{"version":3,"sources":["VectorDotProductWidget.js","App.js","reportWebVitals.js","index.js"],"names":["VectorDotProductWidget","xVectors","setXVectors","useState","Math","floor","random","yVector","setYVector","dotProducts","setDotProducts","averageDotProduct","setAverageDotProduct","resultColor","setResultColor","useEffect","products","map","xVector","reduce","sum","value","index","average","length","intensity","min","abs","React","createElement","className","vectorIndex","key","elementIndex","type","max","onChange","e","handleXInputChange","newXVectors","numValue","Number","target","toFixed","onClick","randomizeVectors","newYVector","handleYSliderChange","handleYInputChange","join","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e4533a43.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\n\nexport default function VectorDotProductWidget() {\n  // Three editable X vectors with initial random values\n  const [xVectors, setXVectors] = useState([\n    // X1\n    [\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5\n    ],\n    // X2\n    [\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5\n    ],\n    // X3\n    [\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5\n    ]\n  ]);\n  \n  // User-adjustable vector y with initial random values\n  const [yVector, setYVector] = useState([\n    Math.floor(Math.random() * 10) - 5,\n    Math.floor(Math.random() * 10) - 5,\n    Math.floor(Math.random() * 10) - 5\n  ]);\n  \n  // Individual dot products and average\n  const [dotProducts, setDotProducts] = useState([0, 0, 0]);\n  const [averageDotProduct, setAverageDotProduct] = useState(0);\n  \n  // Color for the average dot product box\n  const [resultColor, setResultColor] = useState('bg-green-500');\n  \n  // Calculate dot products and average whenever vectors change\n  useEffect(() => {\n    const products = xVectors.map(xVector => \n      xVector.reduce((sum, value, index) => sum + value * yVector[index], 0)\n    );\n    \n    setDotProducts(products);\n    \n    const average = products.reduce((sum, value) => sum + value, 0) / products.length;\n    setAverageDotProduct(average);\n    \n    // Set color based on average result value\n    if (average === 0) {\n      setResultColor('bg-green-500'); // Green for zero\n    } else if (average > 0) {\n      // Red gradient for positive values\n      const intensity = Math.min(Math.abs(average) / 25, 1); // Normalize to 0-1 range\n      if (intensity > 0.8) {\n        setResultColor('bg-red-600');\n      } else if (intensity > 0.6) {\n        setResultColor('bg-red-500');\n      } else if (intensity > 0.4) {\n        setResultColor('bg-red-400');\n      } else if (intensity > 0.2) {\n        setResultColor('bg-red-300');\n      } else {\n        setResultColor('bg-red-200');\n      }\n    } else {\n      // Blue gradient for negative values\n      const intensity = Math.min(Math.abs(average) / 25, 1); // Normalize to 0-1 range\n      if (intensity > 0.8) {\n        setResultColor('bg-blue-600');\n      } else if (intensity > 0.6) {\n        setResultColor('bg-blue-500');\n      } else if (intensity > 0.4) {\n        setResultColor('bg-blue-400');\n      } else if (intensity > 0.2) {\n        setResultColor('bg-blue-300');\n      } else {\n        setResultColor('bg-blue-200');\n      }\n    }\n  }, [xVectors, yVector]);\n  \n  // Handle X vector input changes\n  const handleXInputChange = (vectorIndex, elementIndex, value) => {\n    // Create a copy of xVectors\n    const newXVectors = [...xVectors];\n    // Update the specific element in the specific vector\n    // Ensure the value is a number and clamped between -10 and 10\n    const numValue = Math.max(-10, Math.min(10, Number(value) || 0));\n    newXVectors[vectorIndex][elementIndex] = numValue;\n    // Update state\n    setXVectors(newXVectors);\n  };\n  \n  // Handle Y vector slider changes\n  const handleYSliderChange = (index, value) => {\n    const newYVector = [...yVector];\n    newYVector[index] = Number(value);\n    setYVector(newYVector);\n  };\n  \n  // Handle Y vector input changes\n  const handleYInputChange = (index, value) => {\n    const newYVector = [...yVector];\n    // Ensure the value is a number and clamped between -10 and 10\n    const numValue = Math.max(-10, Math.min(10, Number(value) || 0));\n    newYVector[index] = numValue;\n    setYVector(newYVector);\n  };\n  \n  // Randomize all vectors\n  const randomizeVectors = () => {\n    // Generate new random X vectors\n    const newXVectors = xVectors.map(() => [\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5\n    ]);\n    \n    // Generate new random Y vector\n    const newYVector = [\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5,\n      Math.floor(Math.random() * 10) - 5\n    ];\n    \n    // Update state\n    setXVectors(newXVectors);\n    setYVector(newYVector);\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center p-8 max-w-xl mx-auto bg-gray-50 rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold mb-6 text-gray-800\">Vector Dot Product Calculator</h2>\n      \n      <div className=\"flex justify-between w-full mb-8\">\n        {/* Editable X vectors */}\n        <div className=\"w-1/2 bg-blue-100 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-semibold mb-3 text-center\">X Vectors</h3>\n          <div className=\"flex justify-between gap-2\">\n            {xVectors.map((xVector, vectorIndex) => (\n              <div key={`vector-${vectorIndex}`} className=\"flex-1\">\n                <h4 className=\"text-center font-semibold mb-2\">X{vectorIndex + 1}</h4>\n                <div className=\"flex flex-col gap-3\">\n                  {xVector.map((value, elementIndex) => (\n                    <div key={`x-${vectorIndex}-${elementIndex}`} className=\"flex\">\n                      <input\n                        type=\"number\"\n                        min=\"-10\"\n                        max=\"10\"\n                        value={value}\n                        onChange={(e) => handleXInputChange(vectorIndex, elementIndex, e.target.value)}\n                        className=\"w-full bg-white p-2 rounded text-center font-mono text-sm\"\n                      />\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-2 text-center bg-blue-200 p-1 rounded font-mono text-sm\">\n                  Dot: {dotProducts[vectorIndex]}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Average dot product result */}\n        <div className=\"w-1/4 flex flex-col items-center justify-center\">\n          <div className={`${resultColor} p-4 rounded-lg w-24 h-24 flex items-center justify-center transition-colors duration-300`}>\n            <span className=\"text-xl font-bold text-white text-center\">\n              {averageDotProduct.toFixed(2)}\n            </span>\n          </div>\n          <div className=\"mt-2 text-center text-sm\">Average</div>\n          <button \n            onClick={randomizeVectors}\n            className=\"mt-4 bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded text-sm font-medium\"\n          >\n            Randomize All\n          </button>\n        </div>\n        \n        {/* Adjustable vector Y */}\n        <div className=\"w-1/4 bg-red-100 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-semibold mb-3 text-center\">Vector Y</h3>\n          <div className=\"flex flex-col gap-4\">\n            {yVector.map((value, index) => (\n              <div key={`y-${index}`} className=\"flex flex-col gap-1\">\n                <input\n                  type=\"range\"\n                  min=\"-10\"\n                  max=\"10\"\n                  value={value}\n                  onChange={(e) => handleYSliderChange(index, e.target.value)}\n                  className=\"w-full\"\n                />\n                <input\n                  type=\"number\"\n                  min=\"-10\"\n                  max=\"10\"\n                  value={value}\n                  onChange={(e) => handleYInputChange(index, e.target.value)}\n                  className=\"bg-white p-2 rounded text-center font-mono\"\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-yellow-50 p-4 rounded-lg w-full\">\n        <h3 className=\"text-lg font-semibold mb-2\">Calculation:</h3>\n        <div className=\"grid grid-cols-1 gap-2\">\n          {xVectors.map((xVector, vectorIndex) => (\n            <p key={`formula-${vectorIndex}`} className=\"font-mono text-sm\">\n              X{vectorIndex + 1} · Y = {xVector[0]} × {yVector[0]} + {xVector[1]} × {yVector[1]} + {xVector[2]} × {yVector[2]} = {dotProducts[vectorIndex]}\n            </p>\n          ))}\n          <p className=\"font-mono text-sm font-bold border-t border-yellow-200 pt-2 mt-1\">\n            Average = ({dotProducts.join(' + ')}) ÷ 3 = {averageDotProduct.toFixed(2)}\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 text-sm text-gray-600\">\n        <p>Color coding: Blue (negative) → Green (zero) → Red (positive)</p>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport VectorDotProductWidget from './VectorDotProductWidget';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Vector Dot Product Visualization</h1>\n      </header>\n      <main>\n        <VectorDotProductWidget />\n      </main>\n      <footer>\n        <p>Created with React</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}